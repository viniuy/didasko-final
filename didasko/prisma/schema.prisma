generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  FACULTY
  ACADEMIC_HEAD
}

enum WorkType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

enum Permission {
  GRANTED
  DENIED
}

enum AttendanceStatus {
  PRESENT
  LATE
  ABSENT
  EXCUSED
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  department String
  workType   WorkType @map("work_type")
  role       Role
  permission Permission @default(DENIED)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  accounts   Account[]
  sessions   Session[]
  notes      Note[]
  coursesTeaching Course[]    @relation("FacultyCourses")
  criteria   Criteria[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Section {
  id        String   @id @default(uuid())
  title     String
  section   String
  classes   Class[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sections")
}

model Class {
  id         String      @id @default(uuid())
  name       String
  sectionId  String
  section    Section     @relation(fields: [sectionId], references: [id])
  gradeItems GradeItem[]
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  @@map("classes")
}

model Student {
  id            String    @id @default(uuid())
  lastName      String
  firstName     String
  middleInitial String?
  image         String?
  grades        Grade[]
  attendance    Attendance[]
  coursesEnrolled Course[] @relation("StudentCourses")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("students")
}

model Grade {
  id          String   @id @default(uuid())
  value       Float
  scores      Json     // Array of scores for each rubric
  total       Float    // Total score
  date        DateTime // Date when the grade was given
  studentId   String
  student     Student  @relation(fields: [studentId], references: [id])
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  criteriaId  String
  criteria    Criteria @relation(fields: [criteriaId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([studentId, courseId, date])
  @@index([date])
  @@index([courseId])
  @@index([criteriaId])
  @@map("grades")
}

model GradeItem {
  id        String   @id @default(uuid())
  name      String
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("grade_items")
}

model Criteria {
  id          String   @id @default(uuid())
  name        String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id])
  rubrics     Json     // Will store array of {name: string, percentage: number}
  scoringRange String  // "1-5" or "1-10"
  passingScore String  // "75" or "80"
  grades      Grade[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("criteria")
}

model Event {
  id          String    @id @default(uuid())
  title       String
  description String?
  date        DateTime 
  fromTime    String?
  toTime      String?
  role        Role
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("events")
}

model Note {
  id          String    @id @default(uuid())
  title       String
  description String?
  date        DateTime  // Date for the note
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("notes")
}

model Course {
  id          String   @id @default(uuid())
  code        String   @unique
  title       String
  room        String
  semester    String   
  section     String   
  facultyId   String
  faculty     User     @relation("FacultyCourses", fields: [facultyId], references: [id])
  students    Student[]   @relation("StudentCourses")
  schedules   CourseSchedule[]
  attendance  Attendance[]
  criteria    Criteria[]
  grades      Grade[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("courses")
}

model CourseSchedule {
  id        String   @id @default(uuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  day       DateTime
  fromTime  String
  toTime    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("course_schedules")
}

model Attendance {
  id          String           @id @default(uuid())
  studentId   String
  student     Student         @relation(fields: [studentId], references: [id])
  courseId    String
  course      Course          @relation(fields: [courseId], references: [id])
  date        DateTime
  status      AttendanceStatus
  reason      String?         // Optional reason field for excused absences
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  @@map("attendance")
  @@index([studentId])
  @@index([courseId])
  @@index([date])
}
